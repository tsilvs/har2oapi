{
	"harConfig": {
		// if true, we'll treat every url as having the same domain, regardless of what its actual domain is
		// the first domain we see is the domain we'll use
		"forceAllRequestsInSameSpec": false,
		// if true, every path object will have its own servers entry, defining its base path. This is useful when
		// forceAllRequestsInSameSpec is set
		"addServersToPaths": false,
		// try and guess common auth headers
		"guessAuthenticationHeaders": true,
		// whether non standard methods should be allowed (like HTTP MY_CUSTOM_METHOD)
		"relaxedMethods": false,
		// whether we should try and parse non application/json responses as json - defaults to true
		"relaxedContentTypeJsonParse": true,
		// Whether to filter out all standard headers from the parameter list in openapi
		"filterStandardHeaders": true,
		// Whether to log errors to console
		"logErrors": true,
		// when we encounter a URL, try and parameterize it, such that something like
		// GET /uuids/123e4567-e89b-12d3-a456-426655440000 becomes GET /uuids/{uuid}
		"attemptToParameterizeUrl": true,
		// when we encounter a path without a response or with a response that does not have 2xx, don't include it
		"dropPathsWithoutSuccessfulResponse": true//,
		// // if the response has this status code, ignore the body
		// "ignoreBodiesForStatusCodes": [],
		// // a list of tags that match passed on the path, either [match_and_tag] or [match, tag]
		// "tags": [],
		// // response mime types to filter for
		// "mimeTypes": [],
		// // known security headers for this har, to add to security field in openapi (e.g. "X-Auth-Token")
		// "securityHeaders": [],
		// // a string, regex, or callback to filter urls for inclusion
		// "urlFilter": ""
	},
	"config": {
		"verbose": false,
		"file": "./har.json",
		"out": "./openapi.yaml"
	}
}